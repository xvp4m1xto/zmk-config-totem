//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define BASE 0
#define NAV  1
#define SYM  2
#define ADJ  3
#define TVP1 4
#define TVP2 5

&mt {
    quick-tap-ms = <100>;
    global-quick-tap;
    flavor = "tap-preferred";
    tapping-term-ms = <170>;
};

/ {
    combos {
        compatible = "zmk,combos";

        LDel {
            bindings = <&kp DELETE>;
            key-positions = <12 13>;
        };

        LCtrlDel {
            bindings = <&kp LC(DELETE)>;
            key-positions = <11 12 13>;
            layers = <0 1 2>;
        };

        LSpace {
            bindings = <&kp SPACE>;
            key-positions = <11 12>;
        };

        LCtrlBackspace {
            bindings = <&kp LC(BACKSPACE)>;
            key-positions = <12 11 10>;
            layers = <0 2 1>;
        };

        LEnter {
            bindings = <&kp ENTER>;
            key-positions = <13 10>;
        };

        Text_extract {
            bindings = <&kp LG(LS(E))>;
            key-positions = <3 2 1>;
        };

        Ctrl+Alt+Del {
            bindings = <&kp LC(LA(DELETE))>;
            key-positions = <35 36 37>;
            layers = <0 1 2>;
        };

        LCapsword {
            bindings = <&caps_word>;
            key-positions = <24 21>;
        };

        RCapsword {
            bindings = <&caps_word>;
            key-positions = <27 30>;
        };

        RDel {
            bindings = <&kp DELETE>;
            key-positions = <16 17>;
        };

        RCtrlDel {
            bindings = <&kp LC(DELETE)>;
            key-positions = <16 17 18>;
            layers = <0 1 2>;
        };

        RSpace {
            bindings = <&kp SPACE>;
            key-positions = <17 18>;
        };

        LBackspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <11 10>;
        };

        RBackspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <18 19>;
        };

        RCtrlBackspace {
            bindings = <&kp LC(BACKSPACE)>;
            key-positions = <17 18 19>;
            layers = <0 1 2>;
        };

        REnter {
            bindings = <&kp ENTER>;
            key-positions = <16 19>;
        };

        LAltEnter {
            bindings = <&kp LA(ENTER)>;
            key-positions = <13 12 11 10>;
        };

        RAltEnter {
            bindings = <&kp LA(ENTER)>;
            key-positions = <16 17 18 19>;
        };

        CtrlUp {
            bindings = <&mt LS(LC(UP_ARROW)) LC(UP_ARROW)>;
            key-positions = <2 34>;
            layers = <0 1 2>;
        };

        CtrlDown {
            bindings = <&mt LS(LC(DOWN)) LC(DOWN)>;
            key-positions = <34 12>;
            layers = <0 1 2>;
        };

        CtrlLeft {
            bindings = <&mt LS(LC(LEFT_ARROW)) LC(LEFT_ARROW)>;
            key-positions = <34 11>;
            layers = <0 1 2>;
        };

        CtrlRight {
            bindings = <&mt LS(LC(RIGHT_ARROW)) LC(RIGHT_ARROW)>;
            key-positions = <34 13>;
            layers = <0 1 2>;
        };

        Switch_to_Mac {
            bindings = <&tog 4>;
            key-positions = <6 7 8 35 9>;
            layers = <0>;
        };

        Switch_to_Win {
            bindings = <&tog 0>;
            key-positions = <6 7 8 35 9>;
            layers = <4>;
        };

        OptDel {
            bindings = <&kp LA(DELETE)>;
            key-positions = <11 12 13>;
            layers = <4 5 6>;
        };

        OptBackspace {
            bindings = <&kp LA(BACKSPACE)>;
            key-positions = <12 11 10>;
            layers = <4 5 6>;
        };

        ROptDel {
            bindings = <&kp LA(DELETE)>;
            key-positions = <16 17 18>;
            layers = <4 5 6>;
        };

        ROptBackspace {
            bindings = <&kp LA(BACKSPACE)>;
            key-positions = <17 18 19>;
            layers = <4 5 6>;
        };

        CmdUp {
            bindings = <&mt LS(LG(UP_ARROW)) LG(UP_ARROW)>;
            key-positions = <2 34>;
            layers = <4 5 6>;
        };

        CmdDown {
            bindings = <&mt LS(LG(DOWN)) LG(DOWN)>;
            key-positions = <34 12>;
            layers = <4 5 6>;
        };

        CmdLeft {
            bindings = <&mt LS(LG(LEFT_ARROW)) LG(LEFT_ARROW)>;
            key-positions = <34 11>;
            layers = <4 5 6>;
        };

        CmdRight {
            bindings = <&mt LS(LG(RIGHT_ARROW)) LG(RIGHT_ARROW)>;
            key-positions = <34 13>;
            layers = <4 5 6>;
        };

        To_Adj {
            bindings = <&to 3>;
            key-positions = <35 27 28 29 30>;
            layers = <0 4>;
        };

        Adj_to_Base {
            bindings = <&to 0>;
            key-positions = <35 27 28 29 30>;
            layers = <3>;
        };
    };

    behaviors {
        TD_Enter: TD_Enter {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_ENTER";
            #binding-cells = <0>;
            bindings = <&mt LS(ENTER) ENTER>, <&mt LC(ENTER) LA(ENTER)>;
        };

        LeftHMR: LeftHMR {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFTHMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <32 33 34 35 5 6 7 8 9 15 16 17 18 19 26 27 28 29 30 31 36 37>;
            hold-trigger-on-release;
        };

        RightHRM: RightHRM {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHTHRM";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <32 33 34 35 36 37 0 1 2 3 10 11 12 13 20 21 22 23 24 32 3 4 13 14 25>;
            hold-trigger-on-release;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

        base_layer {
            // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓

            label = "BASE";

            // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
            //             ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓   ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓
            //             ┃     Q     ┃     W     ┃     F     ┃     P     ┃     G     ┃   ┃     J     ┃     L     ┃     U     ┃     Y     ┃     ;     ┃
            //             ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫
            //             ┃     A     ┃     R     ┃     S     ┃     T     ┃     D     ┃   ┃     H     ┃     N     ┃     E     ┃     I     ┃     O     ┃
            // ┏━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┓
            // ┃     Q     ┃     Z     ┃     X     ┃     C     ┃     V     ┃     B     ┃   ┃     K     ┃     M     ┃     ,     ┃     .     ┃     /     ┃     \     ┃
            // ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛
            //                                     ┃    DEL    ┃    TAB    ┃    SPC    ┃   ┃   ENTER   ┃           ┃   BSPC    ┃
            //                                     ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛   ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛

            bindings = <
                     &kp Q       &kp W                &kp E                   &kp R             &kp T        &kp Y          &kp U                 &kp I                    &kp O             &kp P
                     &kp A       &LeftHMR LEFT_ALT S  &LeftHMR LEFT_SHIFT D   &LeftHMR LCTRL F  &kp G        &kp H          &RightHRM RCTRL J     &RightHRM RIGHT_SHIFT K  &RightHRM LALT L  &kp SEMICOLON
&mt LEFT_GUI ESCAPE  &mt LEFT Z  &mt UP_ARROW X       &mt DOWN C              &mt RIGHT V       &kp B        &kp N          &mt LEFT M            &mt DOWN COMMA           &mt UP_ARROW DOT  &mt RIGHT SLASH  &mt RALT APOS
                                                      &mt LEFT_ALT BACKSPACE  &lt 2 SPACE       &lt 1 TAB    &mt RCTRL TAB  &mt LEFT_SHIFT SPACE  &mt RIGHT_ALT DELETE
            >;
        };

        NavFN {
            bindings = <
                        &mt LC(HOME) HOME  &mt LC(PG_UP) PG_UP  &mt LS(UP_ARROW) UP_ARROW  &mt LC(PAGE_DOWN) PAGE_DOWN  &mt LC(END) END    &kp LC(INSERT)  &kp F7  &kp F8  &kp F9  &kp F12
                        &kp LC(A)          &mt LS(LEFT) LEFT    &mt LS(DOWN) DOWN          &mt LS(RIGHT_ARROW) RIGHT    &kp LC(Y)          &kp LC(Y)       &kp F4  &kp F5  &kp F6  &kp F11
&mt PRINTSCREEN ESCAPE  &kp LC(Z)          &mt LC(LS(X)) LC(X)  &kp LC(C)                  &mt LS(LC(V)) LC(V)          &kp LC(B)          &kp LALT        &kp F1  &kp F2  &kp F3  &kp F10  &mt PRINTSCREEN ESCAPE
                                                                &mt LEFT_ALT BACKSPACE     &mt LEFT_SHIFT SPACE         &trans             &trans          &trans  &trans
            >;
        };

        SymNum {
            bindings = <
                 &kp EXCLAMATION              &kp AT_SIGN                    &kp HASH                &kp DOLLAR            &kp PERCENT              &mt K_CALCULATOR AMPERSAND  &kp N7             &kp N8                   &kp N9        &mt PIPE EQUAL
                 &kp RA(LS(APOS))             &kp RA(LS(GRAVE))              &kp RA(GRAVE)           &kp RA(APOS)          &kp RA(NUMBER_6)         &kp PLUS                    &kp NUMBER_4       &kp N5                   &kp NUMBER_6  &mt UNDERSCORE MINUS
&mt RA(S) GRAVE  &mt LEFT_BRACE LEFT_BRACKET  &mt RIGHT_BRACE RIGHT_BRACKET  &kp RA(C)               &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS    &mt RALT ASTERISK           &kp NUMBER_1       &kp NUMBER_2             &kp NUMBER_3  &mt BACKSLASH SLASH   &mt KP_ENTER ENTER
                                                                             &mt LEFT_ALT BACKSPACE  &trans                &mt LCTRL TAB            &mt LESS_THAN COMMA         &mt LEFT_SHIFT N0  &mt GREATER_THAN PERIOD
            >;
        };

        adjust_layer {
            // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓

            label = "ADJ";

            // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
            //             ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓   ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓
            //             ┃   RESET   ┃ BT CLEAR  ┃  OUT TOG  ┃           ┃           ┃   ┃           ┃    F7     ┃    F8     ┃    F9     ┃    F12    ┃
            //             ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫
            //             ┃ BOOTLOAD  ┃ BT NEXT   ┃           ┃           ┃           ┃   ┃           ┃    F4     ┃    F5     ┃    F6     ┃    F11    ┃
            // ┏━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┓
            // ┃           ┃           ┃ BT PREV   ┃           ┃           ┃           ┃   ┃           ┃    F1     ┃    F2     ┃    F3     ┃    F10    ┃           ┃
            // ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛
            //                                     ┃           ┃           ┃           ┃   ┃           ┃           ┃           ┃
            //                                     ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛   ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛

            bindings = <
              &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2   &bt BT_SEL 3   &bt BT_SEL 4      &sys_reset  &none  &none  &none  &none
              &bt BT_DISC 0  &bt BT_DISC 1  &bt BT_DISC 2  &bt BT_DISC 3  &bt BT_DISC 4     &none       &none  &none  &none  &none
&out OUT_TOG  &out OUT_USB   &out OUT_BLE   &bt BT_CLR     &bt BT_PRV     &bt BT_NXT        &none       &none  &none  &none  &none  &bootloader
                                            &none          &none          &bt BT_CLR_ALL    &none       &none  &none
            >;
        };

        Mac_Base {
            label = "Mac_Base";
            bindings = <
                     &kp Q       &kp W            &kp E                  &kp R            &kp T        &kp Y         &kp U                 &kp I                    &kp O                 &kp P
                     &kp A       &LeftHMR LGUI S  &LeftHMR LEFT_SHIFT D  &LeftHMR LALT F  &kp G        &kp H         &RightHRM LALT J      &RightHRM RIGHT_SHIFT K  &RightHRM LEFT_GUI L  &kp SEMICOLON
&mt LCTRL BACKSPACE  &mt LEFT Z  &mt UP_ARROW X   &mt DOWN C             &mt RIGHT V      &kp B        &kp N         &mt LEFT M            &mt DOWN COMMA           &mt UP_ARROW DOT      &mt RIGHT SLASH  &mt RCTRL APOS
                                                  &mt LGUI BACKSPACE     &lt 6 SPACE      &lt 5 TAB    &mt LALT TAB  &mt LEFT_SHIFT SPACE  &mt LGUI DELETE
            >;
        };

        NavFN_Mac {
            bindings = <
                        &mt LG(HOME) HOME  &mt LG(PG_UP) PG_UP  &mt LS(UP_ARROW) UP_ARROW  &mt LG(PAGE_DOWN) PAGE_DOWN  &mt LG(END) END    &kp LC(INSERT)  &kp F7  &kp F8  &kp F9  &kp F12
                        &kp LG(A)          &mt LS(LEFT) LEFT    &mt LS(DOWN) DOWN          &mt LS(RIGHT_ARROW) RIGHT    &kp LG(Y)          &kp LG(Y)       &kp F4  &kp F5  &kp F6  &kp F11
&mt PRINTSCREEN ESCAPE  &kp LG(Z)          &mt LS(LG(X)) LG(X)  &kp LG(C)                  &mt LC(LG(V)) LG(V)          &kp LG(B)          &kp LALT        &kp F1  &kp F2  &kp F3  &kp F10  &mt PRINTSCREEN ESCAPE
                                                                &mt LEFT_ALT BACKSPACE     &mt LEFT_SHIFT SPACE         &trans             &trans          &trans  &trans
            >;
        };

        SymNum_Mac {
            bindings = <
                     &kp EXCLAMATION               &kp AT_SIGN                    &kp HASH                &kp DOLLAR            &kp PERCENT              &mt K_CALCULATOR AMPERSAND  &kp N7             &kp N8                   &kp N9        &mt PIPE EQUAL
                     &mt RA(S) RA(LS(APOSTROPHE))  &kp RA(LS(GRAVE))              &kp RA(GRAVE)           &kp RA(APOS)          &kp RA(NUMBER_6)         &kp PLUS                    &kp NUMBER_4       &kp N5                   &kp NUMBER_6  &mt UNDERSCORE MINUS
&mt RA(GRAVE) GRAVE  &mt LEFT_BRACE LEFT_BRACKET   &mt RIGHT_BRACE RIGHT_BRACKET  &kp RA(C)               &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS    &mt RALT ASTERISK           &kp NUMBER_1       &kp NUMBER_2             &kp NUMBER_3  &mt BACKSLASH SLASH   &mt KP_ENTER ENTER
                                                                                  &mt LEFT_ALT BACKSPACE  &trans                &mt LCTRL TAB            &mt LESS_THAN COMMA         &mt LEFT_SHIFT N0  &mt GREATER_THAN PERIOD
            >;
        };
    };
};
